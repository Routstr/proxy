{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#what-is-routstr-core","title":"What is Routstr Core?","text":"<p>Routstr Core is a FastAPI-based reverse proxy that sits in front of any OpenAI-compatible API. It enables pay-per-request access using Cashu eCash on Bitcoin, with balances tracked in a local database. Requests look like standard OpenAI API calls, so existing clients work unchanged.</p> <ul> <li>Accepts eCash tokens from users (either per-request via the <code>X-Cashu</code> header or by funding an API key)</li> <li>Enforces pricing per request and per token usage</li> <li>Forwards to the upstream model provider and returns responses transparently</li> <li>Provides an admin dashboard for balances and withdrawals</li> </ul> <p>Key modules:</p> <ul> <li><code>routstr/core</code>: app setup, DB, exceptions, logging, middleware, and admin UI</li> <li><code>routstr/proxy</code>: request routing and upstream forwarding</li> <li><code>routstr/auth</code>: bearer key validation and Cashu-token redemption to balances</li> <li><code>routstr/payment</code>: pricing helpers, models, and <code>X-Cashu</code> flow</li> <li><code>routstr/wallet</code>: Cashu wallet operations and periodic payouts</li> </ul> <p>If you just want to run the proxy, start with Quickstart. If you want to contribute, see Contributing.</p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#architecture","title":"Architecture","text":"<p>Routstr Core is organized around a FastAPI app with layered modules:</p> <ul> <li>App lifecycle and cross-cutting concerns in <code>routstr/core</code></li> <li><code>main.py</code>: FastAPI app factory, CORS, routers, background tasks</li> <li><code>db.py</code>: SQLModel <code>ApiKey</code> table, async engine, Alembic migrations runner</li> <li><code>middleware.py</code>: request/response logging with per-request IDs</li> <li><code>exceptions.py</code>: unified exception handlers including <code>request_id</code></li> <li><code>logging.py</code>: JSON logs to <code>logs/</code> (daily-rotated) and optional rich console</li> <li><code>admin.py</code>: minimal admin dashboard (HTML) for balances and withdrawals</li> <li>Request handling in <code>routstr/proxy.py</code></li> <li>Validates auth, pre-charges base cost, forwards to upstream</li> <li>For chat completions, adjusts cost after usage is known</li> <li>Authentication in <code>routstr/auth.py</code></li> <li>Supports <code>sk-&lt;hash&gt;</code> API keys and raw <code>cashu...</code> tokens</li> <li>Cashu tokens are redeemed and stored as balances linked to <code>hashed_key</code></li> <li>Wallet management in <code>routstr/wallet.py</code></li> <li>Cashu wallet creation/loading, token redemption and sending</li> <li>Mint swaps to a primary mint and periodic payouts via LNURL</li> <li>Aggregate balances across mints/units (for admin)</li> <li>Payment pricing in <code>routstr/payment</code></li> <li><code>helpers.py</code>: env, upstream header filtering, model max-cost lookup</li> <li><code>cost_caculation.py</code>: base + token-based pricing, and model-based pricing</li> <li><code>models.py</code>: load models from file or OpenRouter and compute sats caps</li> <li><code>x_cashu.py</code>: per-request payment flow via <code>X-Cashu</code> header, with refunds</li> <li><code>lnurl.py</code>: LNURL payRequest utilities and invoice melt</li> </ul>"},{"location":"architecture/#request-flows","title":"Request flows","text":"<p>1) Bearer flow (funded API keys)    - Client sends standard OpenAI call with <code>Authorization: Bearer sk-...</code> or <code>Bearer cashu...</code>    - <code>auth.validate_bearer_key</code> creates/loads <code>ApiKey</code>, redeeming cashu token if needed    - <code>proxy</code> pre-charges a model-specific capped cost, forwards request    - After response: compute actual token-based cost; refund or top-up delta</p> <p>2) X-Cashu flow (per-request tokens)    - Client sends <code>X-Cashu: &lt;token&gt;</code> on each request    - <code>x_cashu_handler</code> redeems token, forwards upstream, computes cost    - Any change is returned in <code>X-Cashu</code> response header as a new token</p>"},{"location":"architecture/#database-schema","title":"Database schema","text":"<p><code>ApiKey</code> table stores hashed keys, msat balances, reserved balances, refund info, and usage counters. Alembic migrations are executed automatically at startup.</p>"},{"location":"configuration/","title":"Configuration","text":""},{"location":"configuration/#configuration","title":"Configuration","text":"<p>Environment variables control runtime behavior. See <code>.env.example</code> for a full template.</p> <ul> <li>Core</li> <li><code>UPSTREAM_BASE_URL</code>: Required. Base URL of the upstream OpenAI-compatible API</li> <li><code>UPSTREAM_API_KEY</code>: Optional upstream key to inject into forwarded requests</li> <li>Pricing</li> <li><code>COST_PER_REQUEST</code>: Base cost per request in sats (converted to msats)</li> <li><code>COST_PER_1K_INPUT_TOKENS</code>, <code>COST_PER_1K_OUTPUT_TOKENS</code>: additional token-based costs in sats</li> <li><code>MODEL_BASED_PRICING</code>: Enable model-specific caps from <code>routstr/payment/models.py</code></li> <li><code>MODELS_PATH</code>: Path to <code>models.json</code>. If absent, models are fetched from OpenRouter</li> <li><code>SOURCE</code>: Optional filter for OpenRouter model IDs</li> <li>Node metadata</li> <li><code>NAME</code>, <code>DESCRIPTION</code>, <code>NPUB</code>, <code>HTTP_URL</code>, <code>ONION_URL</code>, <code>CORS_ORIGINS</code></li> <li>Wallet</li> <li><code>CASHU_MINTS</code>: Comma-separated list of Cashu mint URLs</li> <li><code>RECEIVE_LN_ADDRESS</code>: LNURL or Lightning Address for periodic payouts</li> <li>Database</li> <li><code>DATABASE_URL</code>: Defaults to <code>sqlite+aiosqlite:///keys.db</code></li> <li>Logging</li> <li><code>LOG_LEVEL</code> (TRACE|DEBUG|INFO|WARNING|ERROR|CRITICAL)</li> <li><code>ENABLE_CONSOLE_LOGGING</code> (true|false)</li> <li>Pricing aggregation tuning</li> <li><code>EXCHANGE_FEE</code>, <code>UPSTREAM_PROVIDER_FEE</code></li> </ul>"},{"location":"configuration/#models-configuration","title":"Models configuration","text":"<p>If <code>MODELS_PATH</code> points to a <code>models.json</code> file, Routstr loads models and computes sats pricing caps. If not set, it auto-fetches models from OpenRouter in memory (no file required). See <code>models.example.json</code> for structure.</p>"},{"location":"configuration/#docker-compose","title":"Docker Compose","text":"<p><code>compose.yml</code> defines services:</p> <ul> <li><code>routstr</code>: main app. Mounts <code>./logs</code> and reads <code>.env</code></li> <li><code>tor</code>: optional Tor hidden service, configured via <code>HS_ROUTER</code></li> </ul> <p>Expose the proxy on <code>:8000</code> and set <code>TOR_PROXY_URL</code> if calling <code>.onion</code> providers.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>Follow the repo's <code>CONTRIBUTING.md</code> for full details. Quick highlights:</p> <ol> <li>Install dev deps and tooling</li> </ol> <pre><code>make setup\n</code></pre> <ol> <li>Run quality checks</li> </ol> <pre><code>make lint\nmake type-check\nmake test\n</code></pre> <ol> <li> <p>Code style</p> </li> <li> <p>Python 3.11+, full type hints</p> </li> <li>Ruff for lint + format, Mypy for types</li> <li> <p>Conventional Commits for messages</p> </li> <li> <p>Project structure</p> </li> <li> <p><code>routstr/core</code>: app, db, logging, admin</p> </li> <li><code>routstr/payment</code>: pricing and models</li> <li><code>routstr/proxy.py</code>: request forwarding and cost handling</li> <li><code>routstr/auth.py</code>: bearer and token auth</li> </ol> <p>Open a PR against <code>main</code> with tests and docs when ready.</p>"},{"location":"operations/","title":"Operations","text":""},{"location":"operations/#operations","title":"Operations","text":""},{"location":"operations/#running-and-health","title":"Running and health","text":"<ul> <li>Start with Docker or <code>fastapi run routstr</code></li> <li>Check <code>/v1/info</code> for node metadata and advertised URLs</li> </ul>"},{"location":"operations/#logs","title":"Logs","text":"<ul> <li>JSON logs are written to <code>logs/app_YYYY-MM-DD.log</code></li> <li>Use <code>LOG_LEVEL</code> and <code>ENABLE_CONSOLE_LOGGING</code> to tune verbosity</li> <li>Admin UI provides a simple per-request log viewer by request ID</li> </ul>"},{"location":"operations/#database-migrations","title":"Database migrations","text":"<p>Migrations run automatically on startup. Manual controls via <code>make</code>:</p> <pre><code>make db-upgrade\nmake db-downgrade\nmake db-current\nmake db-history\nmake db-migrate   # autogenerate from model changes\n</code></pre>"},{"location":"operations/#payouts","title":"Payouts","text":"<p>If <code>RECEIVE_LN_ADDRESS</code> is set, <code>wallet.periodic_payout</code> periodically sends excess owner balance to the specified LNURL/Lightning address.</p>"},{"location":"providers/","title":"Providers","text":""},{"location":"providers/#providers-and-discovery","title":"Providers and discovery","text":"<p>Routstr can discover provider announcements over Nostr (RIP-02) via <code>GET /v1/providers</code>.</p> <ul> <li>Queries default relays like <code>wss://relay.nostr.band</code>, <code>wss://relay.damus.io</code>, <code>wss://relay.routstr.com</code></li> <li>Parses kind <code>31338</code> events for endpoint metadata and supported models</li> <li>Optional <code>?include_json=true</code> triggers a basic health check of <code>/v1/models</code> or <code>/</code></li> </ul> <p>Configure <code>.onion</code> access with <code>TOR_PROXY_URL</code> (e.g., <code>socks5://tor:9050</code>).</p>"},{"location":"publishing/","title":"Publishing Docs","text":""},{"location":"publishing/#publishing-docs-github-pages","title":"Publishing Docs (GitHub Pages)","text":"<ol> <li>Ensure docs build locally:</li> </ol> <pre><code>make docs-build\n</code></pre> <ol> <li> <p>Set up GitHub Pages in your repository settings to serve from <code>gh-pages</code> or <code>/docs</code>.</p> </li> <li> <p>Example GitHub Actions workflow (snippet):</p> </li> </ol> <pre><code>name: docs\non:\n  push:\n    branches: [ main ]\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: astral-sh/setup-uv@v4\n      - run: uv sync --dev\n      - run: uv run mkdocs build --clean\n      - uses: peaceiris/actions-gh-pages@v4\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_dir: ./site\n</code></pre> <p>Alternatively, deploy to any static hosting by serving the generated <code>site/</code> directory.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#quickstart-docker","title":"Quickstart (Docker)","text":"<p>Run a Routstr Core instance in Docker:</p> <pre><code>docker run -d \\\n  --name routstr \\\n  -p 8000:8000 \\\n  -e UPSTREAM_BASE_URL=https://api.openai.com/v1 \\\n  -e UPSTREAM_API_KEY=your-openai-api-key \\\n  ghcr.io/routstr/proxy:latest\n</code></pre> <p>You can now send OpenAI-compatible requests to <code>http://localhost:8000/v1/...</code>.</p> <p>Admin dashboard: <code>http://localhost:8000/admin/</code> (set <code>ADMIN_PASSWORD</code> to enable login).</p>"},{"location":"quickstart/#quickstart-docker-compose","title":"Quickstart (Docker Compose)","text":"<p>The repository includes a <code>compose.yml</code> that optionally runs a Tor hidden service:</p> <pre><code>docker compose up --build\n</code></pre> <p>Exposes the API at <code>http://localhost:8000</code>. If Tor is enabled, your <code>.onion</code> URL will be shown in logs.</p>"},{"location":"quickstart/#environment-variables","title":"Environment variables","text":"<p>Create a <code>.env</code> from <code>.env.example</code> and customize as needed:</p> <pre><code>cp .env.example .env\n</code></pre> <ul> <li><code>UPSTREAM_BASE_URL</code> and <code>UPSTREAM_API_KEY</code>: point to your upstream provider</li> <li><code>MODEL_BASED_PRICING=true</code>: enable per-model caps from <code>models.json</code> or OpenRouter auto-fetch</li> <li><code>CASHU_MINTS</code>: comma-separated Cashu mint URLs</li> <li><code>DATABASE_URL</code>: SQLite by default; can be any SQLAlchemy async URL</li> <li><code>HTTP_URL</code>/<code>ONION_URL</code>: public URLs advertised in <code>/v1/info</code></li> </ul>"},{"location":"quickstart/#running-locally-dev","title":"Running locally (dev)","text":"<pre><code>make setup\nfastapi run routstr --host 0.0.0.0 --port 8000\n</code></pre> <p>Or with <code>uv</code> directly:</p> <pre><code>uv sync\nuv run fastapi run routstr --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"quickstart/#example-client","title":"Example client","text":"<p><code>example.py</code> streams chat completions through Routstr using OpenAI SDK:</p> <pre><code>CASHU_TOKEN=&lt;redeemable token&gt; ROUTSTR_API_URL=http://localhost:8000/v1 python example.py\n</code></pre>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#testing","title":"Testing","text":""},{"location":"testing/#local-tests","title":"Local tests","text":"<pre><code>uv run pytest\n</code></pre> <p>Markers:</p> <ul> <li><code>unit</code> and <code>integration</code></li> <li><code>requires_docker</code> for tests using services</li> <li><code>performance</code> for load tests</li> </ul>"},{"location":"testing/#integration-with-docker-services","title":"Integration with Docker services","text":"<pre><code>make docker-up\nmake test-integration-docker\n</code></pre> <p>This starts a mock OpenAI server, a Cashu mint, and a Nostr relay from <code>compose.testing.yml</code> and runs the suite that requires them.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#using-the-proxy","title":"Using the proxy","text":""},{"location":"usage/#1-per-request-payments-x-cashu-header","title":"1) Per-request payments (X-Cashu header)","text":"<p>Send a redeemable eCash token with each request:</p> <pre><code>curl -sS http://localhost:8000/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"X-Cashu: &lt;ecash_token&gt;\" \\\n  -d '{\"model\":\"openai/gpt-4o-mini\",\"messages\":[{\"role\":\"user\",\"content\":\"hi\"}]}'\n</code></pre> <p>If actual cost is lower than the token amount, change is returned in the <code>X-Cashu</code> response header.</p>"},{"location":"usage/#2-funded-api-key-bearer","title":"2) Funded API key (Bearer)","text":"<p>Create or top up balance by sending a Cashu token as the bearer once, then reuse the <code>sk-</code> key the proxy returns:</p> <pre><code>curl -sS \"http://localhost:8000/v1/balance/create?initial_balance_token=&lt;ecash_token&gt;\"\n# =&gt; { \"api_key\": \"sk-&lt;hash&gt;\", \"balance\": 12345 }\n\ncurl -sS http://localhost:8000/v1/chat/completions \\\n  -H \"Authorization: Bearer sk-&lt;hash&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"model\":\"openai/gpt-4o-mini\",\"messages\":[{\"role\":\"user\",\"content\":\"hi\"}]}'\n</code></pre>"},{"location":"usage/#openai-sdk-example","title":"OpenAI SDK example","text":"<p>Use <code>example.py</code>:</p> <pre><code>CASHU_TOKEN=&lt;ecash_token&gt; ROUTSTR_API_URL=http://localhost:8000/v1 python example.py\n</code></pre>"},{"location":"usage/#admin-dashboard","title":"Admin dashboard","text":"<p>Navigate to <code>/admin/</code> and log in with <code>ADMIN_PASSWORD</code> to view balances and withdraw.</p>"},{"location":"api/app/","title":"App & Routers","text":""},{"location":"api/app/#app-routers","title":"App &amp; Routers","text":""},{"location":"api/app/#fastapi-app-and-routers","title":"FastAPI app and routers","text":"<p>```80:135:/workspace/routstr/core/main.py app = FastAPI(     version=version,     title=os.environ.get(\"NAME\", \"ARoutstrNode\" + version),     description=os.environ.get(\"DESCRIPTION\", \"A Routstr Node\"),     contact={\"name\": os.environ.get(\"NAME\", \"\"), \"npub\": os.environ.get(\"NPUB\", \"\")},     lifespan=lifespan, )</p> <p>app.include_router(models_router) app.include_router(admin_router) app.include_router(balance_router) app.include_router(deprecated_wallet_router) app.include_router(providers_router) app.include_router(proxy_router)</p> <pre><code>### Balance endpoints\n\n```1:60:/workspace/routstr/balance.py\nbalance_router = APIRouter(prefix=\"/v1/balance\")\n\n@router.get(\"/info\")\nasync def wallet_info(key: ApiKey = Depends(get_key_from_header)) -&gt; dict:\n    return {\"api_key\": \"sk-\" + key.hashed_key, \"balance\": key.balance}\n</code></pre>"},{"location":"api/app/#providers-discovery","title":"Providers discovery","text":"<p><code>200:273:/workspace/routstr/discovery.py @providers_router.get(\"/\") async def get_providers(include_json: bool = False, pubkey: str | None = None) -&gt; dict[str, list[dict[str, Any]]]:     ...</code></p>"},{"location":"api/auth_proxy/","title":"Auth & Proxy","text":""},{"location":"api/auth_proxy/#auth-proxy","title":"Auth &amp; Proxy","text":""},{"location":"api/auth_proxy/#authentication","title":"Authentication","text":"<p>```1:140:/workspace/routstr/auth.py async def validate_bearer_key(     bearer_key: str,     session: AsyncSession,     refund_address: Optional[str] = None,     key_expiry_time: Optional[int] = None, ) -&gt; ApiKey:     \"\"\"Validates sk- keys or Cashu tokens, redeeming and persisting balances.\"\"\"</p> <pre><code>### Pre-charge and adjustment\n\n```270:371:/workspace/routstr/auth.py\nasync def pay_for_request(key: ApiKey, cost_per_request: int, session: AsyncSession) -&gt; int:\n    ...\n\nasync def adjust_payment_for_tokens(key: ApiKey, response_data: dict, session: AsyncSession, deducted_max_cost: int) -&gt; dict:\n    ...\n</code></pre>"},{"location":"api/auth_proxy/#proxy-routing","title":"Proxy routing","text":"<p>```245:615:/workspace/routstr/proxy.py async def forward_to_upstream(...):     ...</p> <p>@proxy_router.api_route(\"/{path:path}\", methods=[\"GET\", \"POST\"], response_model=None) async def proxy(...):     ... ```</p>"},{"location":"api/core/","title":"Core","text":""},{"location":"api/core/#core-modules","title":"Core Modules","text":""},{"location":"api/core/#logging-exceptions-middleware","title":"Logging, Exceptions, Middleware","text":"<p>```1:135:/workspace/routstr/core/main.py from ..balance import balance_router, deprecated_wallet_router from ..discovery import providers_router from ..payment.models import MODELS, models_router, update_sats_pricing from ..proxy import proxy_router from ..wallet import periodic_payout from .admin import admin_router from .db import init_db, run_migrations</p> <pre><code>```1:116:/workspace/routstr/core/db.py\nclass ApiKey(SQLModel, table=True):  # type: ignore\n    __tablename__ = \"api_keys\"\n\n    hashed_key: str = Field(primary_key=True)\n    balance: int = Field(default=0, description=\"Balance in millisatoshis (msats)\")\n</code></pre> <p>```1:127:/workspace/routstr/core/middleware.py class LoggingMiddleware(BaseHTTPMiddleware):     async def dispatch(self, request: Request, call_next: Callable) -&gt; Response:         # Generate request ID         request_id = str(uuid.uuid4())</p> <pre><code>```1:58:/workspace/routstr/core/exceptions.py\nasync def http_exception_handler(request: Request, exc: Exception) -&gt; JSONResponse:\n    request_id = getattr(request.state, \"request_id\", \"unknown\")\n</code></pre>"},{"location":"api/payment/","title":"Payments","text":""},{"location":"api/payment/#payments-pricing","title":"Payments &amp; Pricing","text":""},{"location":"api/payment/#pricing-helpers-and-model-caps","title":"Pricing helpers and model caps","text":"<p>```1:204:/workspace/routstr/payment/helpers.py UPSTREAM_BASE_URL = os.environ.get(\"UPSTREAM_BASE_URL\", \"\") UPSTREAM_API_KEY = os.environ.get(\"UPSTREAM_API_KEY\", \"\")</p> <p>def get_max_cost_for_model(model: str, tolerance_percentage: int = 1) -&gt; int:     ...</p> <pre><code>```1:171:/workspace/routstr/payment/cost_caculation.py\nclass CostData(BaseModel):\n    base_msats: int\n    input_msats: int\n    output_msats: int\n    total_msats: int\n\ndef calculate_cost(response_data: dict, max_cost: int) -&gt; CostData | ...\n</code></pre> <p>```1:182:/workspace/routstr/payment/models.py def load_models() -&gt; list[Model]:     \"\"\"Load model definitions from a JSON file or auto-generate from OpenRouter API.\"\"\"</p> <pre><code>### Per-request X-Cashu flow\n\n```1:200:/workspace/routstr/payment/x_cashu.py\nasync def x_cashu_handler(request: Request, x_cashu_token: str, path: str, max_cost_for_model: int) -&gt; Response | StreamingResponse:\n    ...\n</code></pre>"},{"location":"api/payment/#wallet-operations","title":"Wallet operations","text":"<p>```1:200:/workspace/routstr/wallet.py async def recieve_token(token: str) -&gt; tuple[int, str, str]:     ...</p> <p>async def send_token(amount: int, unit: str, mint_url: str | None = None) -&gt; str:     ... ```</p>"}]}